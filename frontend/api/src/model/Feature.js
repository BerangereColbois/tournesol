/**
 * Tournesol API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Feature model module.
 * @module model/Feature
 * @version 2.0.0
 */
class Feature {
    /**
     * Constructs a new <code>Feature</code>.
     * Serialize features used to rate videos.
     * @alias module:model/Feature
     * @param feature {String} Feature short name
     * @param description {String} Feature full description
     * @param color {String} Color of the feature
     * @param enabledByDefault {Boolean} Is enabled for new users?
     */
    constructor(feature, description, color, enabledByDefault) { 
        
        Feature.initialize(this, feature, description, color, enabledByDefault);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, feature, description, color, enabledByDefault) { 
        obj['feature'] = feature;
        obj['description'] = description;
        obj['color'] = color;
        obj['enabled_by_default'] = enabledByDefault;
    }

    /**
     * Constructs a <code>Feature</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Feature} obj Optional instance to populate.
     * @return {module:model/Feature} The populated <code>Feature</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Feature();

            if (data.hasOwnProperty('feature')) {
                obj['feature'] = ApiClient.convertToType(data['feature'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('enabled_by_default')) {
                obj['enabled_by_default'] = ApiClient.convertToType(data['enabled_by_default'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * Feature short name
 * @member {String} feature
 */
Feature.prototype['feature'] = undefined;

/**
 * Feature full description
 * @member {String} description
 */
Feature.prototype['description'] = undefined;

/**
 * Color of the feature
 * @member {String} color
 */
Feature.prototype['color'] = undefined;

/**
 * Is enabled for new users?
 * @member {Boolean} enabled_by_default
 */
Feature.prototype['enabled_by_default'] = undefined;






export default Feature;

