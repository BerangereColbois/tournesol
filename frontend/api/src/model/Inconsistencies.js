/**
 * Tournesol API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SingleFeatureRating from './SingleFeatureRating';

/**
 * The Inconsistencies model module.
 * @module model/Inconsistencies
 * @version 2.0.0
 */
class Inconsistencies {
    /**
     * Constructs a new <code>Inconsistencies</code>.
     * Serialize inconsistencies
     * @alias module:model/Inconsistencies
     * @param feature {String} Feature the inconsistency is on
     * @param comparisons {Array.<module:model/SingleFeatureRating>} All ratings in a cycle
     * @param videos {Array.<String>} All videos in a cycle
     */
    constructor(feature, comparisons, videos) { 
        
        Inconsistencies.initialize(this, feature, comparisons, videos);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, feature, comparisons, videos) { 
        obj['feature'] = feature;
        obj['comparisons'] = comparisons;
        obj['videos'] = videos;
    }

    /**
     * Constructs a <code>Inconsistencies</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Inconsistencies} obj Optional instance to populate.
     * @return {module:model/Inconsistencies} The populated <code>Inconsistencies</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Inconsistencies();

            if (data.hasOwnProperty('feature')) {
                obj['feature'] = ApiClient.convertToType(data['feature'], 'String');
            }
            if (data.hasOwnProperty('comparisons')) {
                obj['comparisons'] = ApiClient.convertToType(data['comparisons'], [SingleFeatureRating]);
            }
            if (data.hasOwnProperty('videos')) {
                obj['videos'] = ApiClient.convertToType(data['videos'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * Feature the inconsistency is on
 * @member {String} feature
 */
Inconsistencies.prototype['feature'] = undefined;

/**
 * All ratings in a cycle
 * @member {Array.<module:model/SingleFeatureRating>} comparisons
 */
Inconsistencies.prototype['comparisons'] = undefined;

/**
 * All videos in a cycle
 * @member {Array.<String>} videos
 */
Inconsistencies.prototype['videos'] = undefined;






export default Inconsistencies;

