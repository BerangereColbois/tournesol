/**
 * Tournesol API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PaginatedVideoReportsSerializerV2List from '../model/PaginatedVideoReportsSerializerV2List';
import PatchedVideoReportsSerializerV2 from '../model/PatchedVideoReportsSerializerV2';
import VideoReportsSerializerV2 from '../model/VideoReportsSerializerV2';

/**
* VideoReports service.
* @module api/VideoReportsApi
* @version 2.0.0
*/
export default class VideoReportsApi {

    /**
    * Constructs a new VideoReportsApi. 
    * @alias module:api/VideoReportsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the videoReportsCreate operation.
     * @callback module:api/VideoReportsApi~videoReportsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoReportsSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Report a video
     * @param {module:model/VideoReportsSerializerV2} videoReportsSerializerV2 
     * @param {module:api/VideoReportsApi~videoReportsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoReportsSerializerV2}
     */
    videoReportsCreate(videoReportsSerializerV2, callback) {
      let postBody = videoReportsSerializerV2;
      // verify the required parameter 'videoReportsSerializerV2' is set
      if (videoReportsSerializerV2 === undefined || videoReportsSerializerV2 === null) {
        throw new Error("Missing the required parameter 'videoReportsSerializerV2' when calling videoReportsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = VideoReportsSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/video_reports/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the videoReportsList operation.
     * @callback module:api/VideoReportsApi~videoReportsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedVideoReportsSerializerV2List} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show all anonymized video reports
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {String} opts.onlyMine only_mine
     * @param {String} opts.videoVideoId video__video_id
     * @param {module:api/VideoReportsApi~videoReportsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedVideoReportsSerializerV2List}
     */
    videoReportsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'only_mine': opts['onlyMine'],
        'video__video_id': opts['videoVideoId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedVideoReportsSerializerV2List;
      return this.apiClient.callApi(
        '/api/v2/video_reports/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the videoReportsPartialUpdate operation.
     * @callback module:api/VideoReportsApi~videoReportsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoReportsSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change some fields in a video report
     * @param {Number} id A unique integer value identifying this video reports.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedVideoReportsSerializerV2} opts.patchedVideoReportsSerializerV2 
     * @param {module:api/VideoReportsApi~videoReportsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoReportsSerializerV2}
     */
    videoReportsPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedVideoReportsSerializerV2'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling videoReportsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = VideoReportsSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/video_reports/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the videoReportsRetrieve operation.
     * @callback module:api/VideoReportsApi~videoReportsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoReportsSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one video report
     * @param {Number} id A unique integer value identifying this video reports.
     * @param {module:api/VideoReportsApi~videoReportsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoReportsSerializerV2}
     */
    videoReportsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling videoReportsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VideoReportsSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/video_reports/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the videoReportsUpdate operation.
     * @callback module:api/VideoReportsApi~videoReportsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoReportsSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change all fields in a video report
     * @param {Number} id A unique integer value identifying this video reports.
     * @param {module:model/VideoReportsSerializerV2} videoReportsSerializerV2 
     * @param {module:api/VideoReportsApi~videoReportsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoReportsSerializerV2}
     */
    videoReportsUpdate(id, videoReportsSerializerV2, callback) {
      let postBody = videoReportsSerializerV2;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling videoReportsUpdate");
      }
      // verify the required parameter 'videoReportsSerializerV2' is set
      if (videoReportsSerializerV2 === undefined || videoReportsSerializerV2 === null) {
        throw new Error("Missing the required parameter 'videoReportsSerializerV2' when calling videoReportsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = VideoReportsSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/video_reports/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
