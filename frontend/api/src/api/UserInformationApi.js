/**
 * Tournesol API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PaginatedExpertiseList from '../model/PaginatedExpertiseList';
import PaginatedOnlyUsernameList from '../model/PaginatedOnlyUsernameList';
import PaginatedUserInformationPublicSerializerV2List from '../model/PaginatedUserInformationPublicSerializerV2List';
import PaginatedVerifiableEmailList from '../model/PaginatedVerifiableEmailList';
import PatchedUserInformationPublicSerializerV2 from '../model/PatchedUserInformationPublicSerializerV2';
import UserInformationPublicSerializerV2 from '../model/UserInformationPublicSerializerV2';
import VerifiableEmail from '../model/VerifiableEmail';

/**
* UserInformation service.
* @module api/UserInformationApi
* @version 2.0.0
*/
export default class UserInformationApi {

    /**
    * Constructs a new UserInformationApi. 
    * @alias module:api/UserInformationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userInformationAddVerifyEmailPartialUpdate operation.
     * @callback module:api/UserInformationApi~userInformationAddVerifyEmailPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifiableEmail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an address and ask for verification.
     * @param {String} email E-mail to add and ask to verify
     * @param {Number} id A unique integer value identifying this user information.
     * @param {module:api/UserInformationApi~userInformationAddVerifyEmailPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifiableEmail}
     */
    userInformationAddVerifyEmailPartialUpdate(email, id, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling userInformationAddVerifyEmailPartialUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userInformationAddVerifyEmailPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'email': email
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VerifiableEmail;
      return this.apiClient.callApi(
        '/api/v2/user_information/{id}/add_verify_email/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userInformationList operation.
     * @callback module:api/UserInformationApi~userInformationListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedUserInformationPublicSerializerV2List} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List and filter user information
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {String} opts.userUsername user__username
     * @param {module:api/UserInformationApi~userInformationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedUserInformationPublicSerializerV2List}
     */
    userInformationList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'user__username': opts['userUsername']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedUserInformationPublicSerializerV2List;
      return this.apiClient.callApi(
        '/api/v2/user_information/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userInformationPartialUpdate operation.
     * @callback module:api/UserInformationApi~userInformationPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInformationPublicSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially update my user information
     * @param {Number} id A unique integer value identifying this user information.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedUserInformationPublicSerializerV2} opts.patchedUserInformationPublicSerializerV2 
     * @param {module:api/UserInformationApi~userInformationPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserInformationPublicSerializerV2}
     */
    userInformationPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedUserInformationPublicSerializerV2'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userInformationPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UserInformationPublicSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/user_information/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userInformationPublicModelsList operation.
     * @callback module:api/UserInformationApi~userInformationPublicModelsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedOnlyUsernameList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ask for e-mail verification for all unverified e-mails.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {String} opts.userUsername user__username
     * @param {module:api/UserInformationApi~userInformationPublicModelsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedOnlyUsernameList}
     */
    userInformationPublicModelsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'user__username': opts['userUsername']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedOnlyUsernameList;
      return this.apiClient.callApi(
        '/api/v2/user_information/public_models/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userInformationRetrieve operation.
     * @callback module:api/UserInformationApi~userInformationRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInformationPublicSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about one user
     * @param {Number} id A unique integer value identifying this user information.
     * @param {module:api/UserInformationApi~userInformationRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserInformationPublicSerializerV2}
     */
    userInformationRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userInformationRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserInformationPublicSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/user_information/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userInformationSearchExpertiseList operation.
     * @callback module:api/UserInformationApi~userInformationSearchExpertiseListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedExpertiseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get and set my UserInformation.
     * @param {String} searchQuery Search for this string in expertises
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {String} opts.userUsername user__username
     * @param {module:api/UserInformationApi~userInformationSearchExpertiseListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedExpertiseList}
     */
    userInformationSearchExpertiseList(searchQuery, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'searchQuery' is set
      if (searchQuery === undefined || searchQuery === null) {
        throw new Error("Missing the required parameter 'searchQuery' when calling userInformationSearchExpertiseList");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search_query': searchQuery,
        'user__username': opts['userUsername']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedExpertiseList;
      return this.apiClient.callApi(
        '/api/v2/user_information/search_expertise/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userInformationSearchUsernameList operation.
     * @callback module:api/UserInformationApi~userInformationSearchUsernameListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedOnlyUsernameList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get and set my UserInformation.
     * @param {String} searchQuery Search for this string in user names
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {String} opts.userUsername user__username
     * @param {module:api/UserInformationApi~userInformationSearchUsernameListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedOnlyUsernameList}
     */
    userInformationSearchUsernameList(searchQuery, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'searchQuery' is set
      if (searchQuery === undefined || searchQuery === null) {
        throw new Error("Missing the required parameter 'searchQuery' when calling userInformationSearchUsernameList");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search_query': searchQuery,
        'user__username': opts['userUsername']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedOnlyUsernameList;
      return this.apiClient.callApi(
        '/api/v2/user_information/search_username/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userInformationUpdate operation.
     * @callback module:api/UserInformationApi~userInformationUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInformationPublicSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace my user information
     * @param {Number} id A unique integer value identifying this user information.
     * @param {module:model/UserInformationPublicSerializerV2} userInformationPublicSerializerV2 
     * @param {module:api/UserInformationApi~userInformationUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserInformationPublicSerializerV2}
     */
    userInformationUpdate(id, userInformationPublicSerializerV2, callback) {
      let postBody = userInformationPublicSerializerV2;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userInformationUpdate");
      }
      // verify the required parameter 'userInformationPublicSerializerV2' is set
      if (userInformationPublicSerializerV2 === undefined || userInformationPublicSerializerV2 === null) {
        throw new Error("Missing the required parameter 'userInformationPublicSerializerV2' when calling userInformationUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UserInformationPublicSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/user_information/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userInformationVerifyAllEmailsPartialUpdate operation.
     * @callback module:api/UserInformationApi~userInformationVerifyAllEmailsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedVerifiableEmailList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ask for e-mail verification for all unverified e-mails.
     * @param {Number} id A unique integer value identifying this user information.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {String} opts.userUsername user__username
     * @param {module:api/UserInformationApi~userInformationVerifyAllEmailsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedVerifiableEmailList}
     */
    userInformationVerifyAllEmailsPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userInformationVerifyAllEmailsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'user__username': opts['userUsername']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedVerifiableEmailList;
      return this.apiClient.callApi(
        '/api/v2/user_information/{id}/verify_all_emails/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userInformationVerifyEmailPartialUpdate operation.
     * @callback module:api/UserInformationApi~userInformationVerifyEmailPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifiableEmail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ask for e-mail verification.
     * @param {String} email E-mail to verify
     * @param {Number} id A unique integer value identifying this user information.
     * @param {module:api/UserInformationApi~userInformationVerifyEmailPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifiableEmail}
     */
    userInformationVerifyEmailPartialUpdate(email, id, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling userInformationVerifyEmailPartialUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userInformationVerifyEmailPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'email': email
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VerifiableEmail;
      return this.apiClient.callApi(
        '/api/v2/user_information/{id}/verify_email/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
