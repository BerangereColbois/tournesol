/**
 * Tournesol API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PaginatedUserPreferencesSerializerV2List from '../model/PaginatedUserPreferencesSerializerV2List';
import PatchedUserPreferencesSerializerV2 from '../model/PatchedUserPreferencesSerializerV2';
import UserPreferencesSerializerV2 from '../model/UserPreferencesSerializerV2';

/**
* UserPreferences service.
* @module api/UserPreferencesApi
* @version 2.0.0
*/
export default class UserPreferencesApi {

    /**
    * Constructs a new UserPreferencesApi. 
    * @alias module:api/UserPreferencesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userPreferencesList operation.
     * @callback module:api/UserPreferencesApi~userPreferencesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedUserPreferencesSerializerV2List} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show my user preferences in a list
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/UserPreferencesApi~userPreferencesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedUserPreferencesSerializerV2List}
     */
    userPreferencesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedUserPreferencesSerializerV2List;
      return this.apiClient.callApi(
        '/api/v2/user_preferences/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userPreferencesMyPartialUpdate operation.
     * @callback module:api/UserPreferencesApi~userPreferencesMyPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserPreferencesSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get/set my own user preferences.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedUserPreferencesSerializerV2} opts.patchedUserPreferencesSerializerV2 
     * @param {module:api/UserPreferencesApi~userPreferencesMyPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserPreferencesSerializerV2}
     */
    userPreferencesMyPartialUpdate(opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedUserPreferencesSerializerV2'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UserPreferencesSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/user_preferences/my/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userPreferencesMyRetrieve operation.
     * @callback module:api/UserPreferencesApi~userPreferencesMyRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserPreferencesSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get/set my own user preferences.
     * @param {module:api/UserPreferencesApi~userPreferencesMyRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserPreferencesSerializerV2}
     */
    userPreferencesMyRetrieve(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserPreferencesSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/user_preferences/my/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userPreferencesPartialUpdate operation.
     * @callback module:api/UserPreferencesApi~userPreferencesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserPreferencesSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change some fields in user preferences
     * @param {Number} id A unique integer value identifying this user preferences.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedUserPreferencesSerializerV2} opts.patchedUserPreferencesSerializerV2 
     * @param {module:api/UserPreferencesApi~userPreferencesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserPreferencesSerializerV2}
     */
    userPreferencesPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedUserPreferencesSerializerV2'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userPreferencesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UserPreferencesSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/user_preferences/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userPreferencesRetrieve operation.
     * @callback module:api/UserPreferencesApi~userPreferencesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserPreferencesSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user preferences
     * @param {Number} id A unique integer value identifying this user preferences.
     * @param {module:api/UserPreferencesApi~userPreferencesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserPreferencesSerializerV2}
     */
    userPreferencesRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userPreferencesRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserPreferencesSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/user_preferences/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userPreferencesUpdate operation.
     * @callback module:api/UserPreferencesApi~userPreferencesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserPreferencesSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change all fields in user preferences
     * @param {Number} id A unique integer value identifying this user preferences.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserPreferencesSerializerV2} opts.userPreferencesSerializerV2 
     * @param {module:api/UserPreferencesApi~userPreferencesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserPreferencesSerializerV2}
     */
    userPreferencesUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['userPreferencesSerializerV2'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userPreferencesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UserPreferencesSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/user_preferences/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
