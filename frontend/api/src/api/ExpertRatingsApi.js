/**
 * Tournesol API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExpertRatingsSerializerV2 from '../model/ExpertRatingsSerializerV2';
import GenericError from '../model/GenericError';
import OnlineResponse from '../model/OnlineResponse';
import PaginatedDisagreementList from '../model/PaginatedDisagreementList';
import PaginatedExpertRatingsSerializerV2List from '../model/PaginatedExpertRatingsSerializerV2List';
import PaginatedInconsistenciesList from '../model/PaginatedInconsistenciesList';
import PatchedExpertRatingsSerializerV2 from '../model/PatchedExpertRatingsSerializerV2';
import PatchedVideo from '../model/PatchedVideo';
import Samplevideov3Error from '../model/Samplevideov3Error';
import SliderChangeSerializerV2 from '../model/SliderChangeSerializerV2';
import VideoSerializerV2 from '../model/VideoSerializerV2';

/**
* ExpertRatings service.
* @module api/ExpertRatingsApi
* @version 2.0.0
*/
export default class ExpertRatingsApi {

    /**
    * Constructs a new ExpertRatingsApi. 
    * @alias module:api/ExpertRatingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2ExpertRatingsDoubleDown operation.
     * @callback module:api/ExpertRatingsApi~apiV2ExpertRatingsDoubleDownCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpertRatingsSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Double the weight of one of the ratings on one of the features.
     * @param {String} feature The feature to double down the weight on
     * @param {String} videoLeft Left video (can be either v1 or v2)
     * @param {String} videoRight Right video (can be either v1 or v2)
     * @param {module:api/ExpertRatingsApi~apiV2ExpertRatingsDoubleDownCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpertRatingsSerializerV2}
     */
    apiV2ExpertRatingsDoubleDown(feature, videoLeft, videoRight, callback) {
      let postBody = null;
      // verify the required parameter 'feature' is set
      if (feature === undefined || feature === null) {
        throw new Error("Missing the required parameter 'feature' when calling apiV2ExpertRatingsDoubleDown");
      }
      // verify the required parameter 'videoLeft' is set
      if (videoLeft === undefined || videoLeft === null) {
        throw new Error("Missing the required parameter 'videoLeft' when calling apiV2ExpertRatingsDoubleDown");
      }
      // verify the required parameter 'videoRight' is set
      if (videoRight === undefined || videoRight === null) {
        throw new Error("Missing the required parameter 'videoRight' when calling apiV2ExpertRatingsDoubleDown");
      }

      let pathParams = {
      };
      let queryParams = {
        'feature': feature,
        'video_left': videoLeft,
        'video_right': videoRight
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExpertRatingsSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/expert_ratings/double_down/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ExpertRatingsSampleVideo operation.
     * @callback module:api/ExpertRatingsApi~apiV2ExpertRatingsSampleVideoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sample a video to rate.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.onlyRated Only sample videos already rated by the expert
     * @param {module:api/ExpertRatingsApi~apiV2ExpertRatingsSampleVideoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoSerializerV2}
     */
    apiV2ExpertRatingsSampleVideo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'only_rated': opts['onlyRated']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VideoSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/expert_ratings/sample_video/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ExpertRatingsShowInconsistencies operation.
     * @callback module:api/ExpertRatingsApi~apiV2ExpertRatingsShowInconsistenciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedInconsistenciesList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get inconsistencies in Expert Ratings.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {String} opts.video1 First video in the rating (fixed order)
     * @param {String} opts.video2 Second video in the rating (fixed order)
     * @param {String} opts.videoVideoId Any video ID (first or second)
     * @param {module:api/ExpertRatingsApi~apiV2ExpertRatingsShowInconsistenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedInconsistenciesList}
     */
    apiV2ExpertRatingsShowInconsistencies(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'video_1': opts['video1'],
        'video_2': opts['video2'],
        'video__video_id': opts['videoVideoId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedInconsistenciesList;
      return this.apiClient.callApi(
        '/api/v2/expert_ratings/inconsistencies/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disagreements operation.
     * @callback module:api/ExpertRatingsApi~disagreementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDisagreementList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get disagreements in Expert Ratings.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {String} opts.video1 First video in the rating (fixed order)
     * @param {String} opts.video2 Second video in the rating (fixed order)
     * @param {String} opts.videoVideoId Any video ID (first or second)
     * @param {module:api/ExpertRatingsApi~disagreementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDisagreementList}
     */
    disagreements(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'video_1': opts['video1'],
        'video_2': opts['video2'],
        'video__video_id': opts['videoVideoId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDisagreementList;
      return this.apiClient.callApi(
        '/api/v2/expert_ratings/disagreements/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expertRatingsByVideoIdsPartialUpdate operation.
     * @callback module:api/ExpertRatingsApi~expertRatingsByVideoIdsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpertRatingsSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get/set ratings by video IDs, with reverse order (v1-v2 and v2-v1) supported.
     * @param {String} videoLeft Left video (can be either v1 or v2)
     * @param {String} videoRight Right video (can be either v1 or v2)
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.forceSetIds Force set video_1 and video_2 (in DB order -- confusing, disabled by-default)
     * @param {module:model/PatchedExpertRatingsSerializerV2} opts.patchedExpertRatingsSerializerV2 
     * @param {module:api/ExpertRatingsApi~expertRatingsByVideoIdsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpertRatingsSerializerV2}
     */
    expertRatingsByVideoIdsPartialUpdate(videoLeft, videoRight, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedExpertRatingsSerializerV2'];
      // verify the required parameter 'videoLeft' is set
      if (videoLeft === undefined || videoLeft === null) {
        throw new Error("Missing the required parameter 'videoLeft' when calling expertRatingsByVideoIdsPartialUpdate");
      }
      // verify the required parameter 'videoRight' is set
      if (videoRight === undefined || videoRight === null) {
        throw new Error("Missing the required parameter 'videoRight' when calling expertRatingsByVideoIdsPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
        'force_set_ids': opts['forceSetIds'],
        'video_left': videoLeft,
        'video_right': videoRight
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ExpertRatingsSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/expert_ratings/by_video_ids/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expertRatingsByVideoIdsRetrieve operation.
     * @callback module:api/ExpertRatingsApi~expertRatingsByVideoIdsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpertRatingsSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get/set ratings by video IDs, with reverse order (v1-v2 and v2-v1) supported.
     * @param {String} videoLeft Left video (can be either v1 or v2)
     * @param {String} videoRight Right video (can be either v1 or v2)
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.forceSetIds Force set video_1 and video_2 (in DB order -- confusing, disabled by-default)
     * @param {module:api/ExpertRatingsApi~expertRatingsByVideoIdsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpertRatingsSerializerV2}
     */
    expertRatingsByVideoIdsRetrieve(videoLeft, videoRight, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'videoLeft' is set
      if (videoLeft === undefined || videoLeft === null) {
        throw new Error("Missing the required parameter 'videoLeft' when calling expertRatingsByVideoIdsRetrieve");
      }
      // verify the required parameter 'videoRight' is set
      if (videoRight === undefined || videoRight === null) {
        throw new Error("Missing the required parameter 'videoRight' when calling expertRatingsByVideoIdsRetrieve");
      }

      let pathParams = {
      };
      let queryParams = {
        'force_set_ids': opts['forceSetIds'],
        'video_left': videoLeft,
        'video_right': videoRight
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExpertRatingsSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/expert_ratings/by_video_ids/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expertRatingsCreate operation.
     * @callback module:api/ExpertRatingsApi~expertRatingsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpertRatingsSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rate two videos
     * @param {module:model/ExpertRatingsSerializerV2} expertRatingsSerializerV2 
     * @param {module:api/ExpertRatingsApi~expertRatingsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpertRatingsSerializerV2}
     */
    expertRatingsCreate(expertRatingsSerializerV2, callback) {
      let postBody = expertRatingsSerializerV2;
      // verify the required parameter 'expertRatingsSerializerV2' is set
      if (expertRatingsSerializerV2 === undefined || expertRatingsSerializerV2 === null) {
        throw new Error("Missing the required parameter 'expertRatingsSerializerV2' when calling expertRatingsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ExpertRatingsSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/expert_ratings/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expertRatingsList operation.
     * @callback module:api/ExpertRatingsApi~expertRatingsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedExpertRatingsSerializerV2List} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List my own expert ratings
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {String} opts.video1 First video in the rating (fixed order)
     * @param {String} opts.video2 Second video in the rating (fixed order)
     * @param {String} opts.videoVideoId Any video ID (first or second)
     * @param {module:api/ExpertRatingsApi~expertRatingsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedExpertRatingsSerializerV2List}
     */
    expertRatingsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'video_1': opts['video1'],
        'video_2': opts['video2'],
        'video__video_id': opts['videoVideoId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedExpertRatingsSerializerV2List;
      return this.apiClient.callApi(
        '/api/v2/expert_ratings/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expertRatingsOnlineByVideoIdsPartialUpdate operation.
     * @callback module:api/ExpertRatingsApi~expertRatingsOnlineByVideoIdsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnlineResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Do online updates on ratings.
     * @param {String} feature The feature to update
     * @param {Number} newValue New value for the feature in 0..100.0
     * @param {String} videoLeft Left video (can be either v1 or v2)
     * @param {String} videoRight Right video (can be either v1 or v2)
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.addDebugInfo Return also a dict with information
     * @param {module:api/ExpertRatingsApi~expertRatingsOnlineByVideoIdsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnlineResponse}
     */
    expertRatingsOnlineByVideoIdsPartialUpdate(feature, newValue, videoLeft, videoRight, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'feature' is set
      if (feature === undefined || feature === null) {
        throw new Error("Missing the required parameter 'feature' when calling expertRatingsOnlineByVideoIdsPartialUpdate");
      }
      // verify the required parameter 'newValue' is set
      if (newValue === undefined || newValue === null) {
        throw new Error("Missing the required parameter 'newValue' when calling expertRatingsOnlineByVideoIdsPartialUpdate");
      }
      // verify the required parameter 'videoLeft' is set
      if (videoLeft === undefined || videoLeft === null) {
        throw new Error("Missing the required parameter 'videoLeft' when calling expertRatingsOnlineByVideoIdsPartialUpdate");
      }
      // verify the required parameter 'videoRight' is set
      if (videoRight === undefined || videoRight === null) {
        throw new Error("Missing the required parameter 'videoRight' when calling expertRatingsOnlineByVideoIdsPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
        'add_debug_info': opts['addDebugInfo'],
        'feature': feature,
        'new_value': newValue,
        'video_left': videoLeft,
        'video_right': videoRight
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OnlineResponse;
      return this.apiClient.callApi(
        '/api/v2/expert_ratings/online_by_video_ids/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expertRatingsOnlineByVideoIdsRetrieve operation.
     * @callback module:api/ExpertRatingsApi~expertRatingsOnlineByVideoIdsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnlineResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Do online updates on ratings.
     * @param {String} feature The feature to update
     * @param {Number} newValue New value for the feature in 0..100.0
     * @param {String} videoLeft Left video (can be either v1 or v2)
     * @param {String} videoRight Right video (can be either v1 or v2)
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.addDebugInfo Return also a dict with information
     * @param {module:api/ExpertRatingsApi~expertRatingsOnlineByVideoIdsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnlineResponse}
     */
    expertRatingsOnlineByVideoIdsRetrieve(feature, newValue, videoLeft, videoRight, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'feature' is set
      if (feature === undefined || feature === null) {
        throw new Error("Missing the required parameter 'feature' when calling expertRatingsOnlineByVideoIdsRetrieve");
      }
      // verify the required parameter 'newValue' is set
      if (newValue === undefined || newValue === null) {
        throw new Error("Missing the required parameter 'newValue' when calling expertRatingsOnlineByVideoIdsRetrieve");
      }
      // verify the required parameter 'videoLeft' is set
      if (videoLeft === undefined || videoLeft === null) {
        throw new Error("Missing the required parameter 'videoLeft' when calling expertRatingsOnlineByVideoIdsRetrieve");
      }
      // verify the required parameter 'videoRight' is set
      if (videoRight === undefined || videoRight === null) {
        throw new Error("Missing the required parameter 'videoRight' when calling expertRatingsOnlineByVideoIdsRetrieve");
      }

      let pathParams = {
      };
      let queryParams = {
        'add_debug_info': opts['addDebugInfo'],
        'feature': feature,
        'new_value': newValue,
        'video_left': videoLeft,
        'video_right': videoRight
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OnlineResponse;
      return this.apiClient.callApi(
        '/api/v2/expert_ratings/online_by_video_ids/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expertRatingsPartialUpdate operation.
     * @callback module:api/ExpertRatingsApi~expertRatingsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpertRatingsSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change some fields in a rating
     * @param {Number} id A unique integer value identifying this expert rating.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedExpertRatingsSerializerV2} opts.patchedExpertRatingsSerializerV2 
     * @param {module:api/ExpertRatingsApi~expertRatingsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpertRatingsSerializerV2}
     */
    expertRatingsPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedExpertRatingsSerializerV2'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling expertRatingsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ExpertRatingsSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/expert_ratings/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expertRatingsRetrieve operation.
     * @callback module:api/ExpertRatingsApi~expertRatingsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpertRatingsSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set and get expert ratings.
     * @param {Number} id A unique integer value identifying this expert rating.
     * @param {module:api/ExpertRatingsApi~expertRatingsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpertRatingsSerializerV2}
     */
    expertRatingsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling expertRatingsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExpertRatingsSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/expert_ratings/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expertRatingsSampleFirstVideoRetrieve operation.
     * @callback module:api/ExpertRatingsApi~expertRatingsSampleFirstVideoRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sample a video to rate.
     * @param {Object} opts Optional parameters
     * @param {String} opts.videoExclude Exclude a video ID from consideration
     * @param {module:api/ExpertRatingsApi~expertRatingsSampleFirstVideoRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoSerializerV2}
     */
    expertRatingsSampleFirstVideoRetrieve(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'video_exclude': opts['videoExclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VideoSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/expert_ratings/sample_first_video/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expertRatingsSamplePopularVideoRetrieve operation.
     * @callback module:api/ExpertRatingsApi~expertRatingsSamplePopularVideoRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sample a popular video.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.noRateLater Do not show videos in rate later list
     * @param {module:api/ExpertRatingsApi~expertRatingsSamplePopularVideoRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoSerializerV2}
     */
    expertRatingsSamplePopularVideoRetrieve(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'no_rate_later': opts['noRateLater']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VideoSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/expert_ratings/sample_popular_video/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expertRatingsSampleVideoWithOtherRetrieve operation.
     * @callback module:api/ExpertRatingsApi~expertRatingsSampleVideoWithOtherRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sample a video to rate.
     * @param {String} videoOther Other video_id being rated
     * @param {module:api/ExpertRatingsApi~expertRatingsSampleVideoWithOtherRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoSerializerV2}
     */
    expertRatingsSampleVideoWithOtherRetrieve(videoOther, callback) {
      let postBody = null;
      // verify the required parameter 'videoOther' is set
      if (videoOther === undefined || videoOther === null) {
        throw new Error("Missing the required parameter 'videoOther' when calling expertRatingsSampleVideoWithOtherRetrieve");
      }

      let pathParams = {
      };
      let queryParams = {
        'video_other': videoOther
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VideoSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/expert_ratings/sample_video_with_other/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expertRatingsSkipVideoPartialUpdate operation.
     * @callback module:api/ExpertRatingsApi~expertRatingsSkipVideoPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set and get expert ratings.
     * @param {Array.<module:model/PatchedVideo>} patchedVideo 
     * @param {module:api/ExpertRatingsApi~expertRatingsSkipVideoPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    expertRatingsSkipVideoPartialUpdate(patchedVideo, callback) {
      let postBody = patchedVideo;
      // verify the required parameter 'patchedVideo' is set
      if (patchedVideo === undefined || patchedVideo === null) {
        throw new Error("Missing the required parameter 'patchedVideo' when calling expertRatingsSkipVideoPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/expert_ratings/skip_video/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expertRatingsUpdate operation.
     * @callback module:api/ExpertRatingsApi~expertRatingsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpertRatingsSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change all fields in a rating
     * @param {Number} id A unique integer value identifying this expert rating.
     * @param {module:model/ExpertRatingsSerializerV2} expertRatingsSerializerV2 
     * @param {module:api/ExpertRatingsApi~expertRatingsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpertRatingsSerializerV2}
     */
    expertRatingsUpdate(id, expertRatingsSerializerV2, callback) {
      let postBody = expertRatingsSerializerV2;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling expertRatingsUpdate");
      }
      // verify the required parameter 'expertRatingsSerializerV2' is set
      if (expertRatingsSerializerV2 === undefined || expertRatingsSerializerV2 === null) {
        throw new Error("Missing the required parameter 'expertRatingsSerializerV2' when calling expertRatingsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ExpertRatingsSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/expert_ratings/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerSliderChange operation.
     * @callback module:api/ExpertRatingsApi~registerSliderChangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SliderChangeSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register any change in slider values on the rating page.
     * @param {module:model/SliderChangeSerializerV2} sliderChangeSerializerV2 
     * @param {module:api/ExpertRatingsApi~registerSliderChangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SliderChangeSerializerV2}
     */
    registerSliderChange(sliderChangeSerializerV2, callback) {
      let postBody = sliderChangeSerializerV2;
      // verify the required parameter 'sliderChangeSerializerV2' is set
      if (sliderChangeSerializerV2 === undefined || sliderChangeSerializerV2 === null) {
        throw new Error("Missing the required parameter 'sliderChangeSerializerV2' when calling registerSliderChange");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = SliderChangeSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/expert_ratings/register_slider_change/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
